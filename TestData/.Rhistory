add_osm_feature("highway", "traffic_signals")
signals <- osmdata_sf(q)
signals
signals$osm_points$geometry
distances=c(1:length(signals$osm_points$osm_id))
for(i in 1:length(distances)){
distances[i]=distm(Brandenburg_Gate, c(signals$osm_points$geometry[[i]][1],signals$osm_points$geometry[[i]][2]), fun=distGeo)
}
min(distances)
sum(distances < 1000)
q2 <- getbb(city) %>%
opq() %>%
add_osm_feature("highway", "primary")
primary <- osmdata_sf(q2)
#Since now we are handeling street, we are not longer interested in osm_points but osm_lines
Lines_primary = st_transform(primary$osm_lines$geometry,4269)
#We need to convert our point at Brandenburg Gate to another data format
POINT_Brandenburg_Gate = as.data.frame(rbind(Brandenburg_Gate))
names(POINT_Brandenburg_Gate)[1]="long1"
names(POINT_Brandenburg_Gate)[2]="lat1"
POINT_Brandenburg_Gate = st_as_sf(POINT_Brandenburg_Gate, coords = c("long1","lat1"))
POINT_Brandenburg_Gate <- st_set_crs(POINT_Brandenburg_Gate, 4269)
#now we can use the st_distance() function to calculate each distance from our Point to each line in our primary street network.
#The smallest distance is:
min(st_distance(POINT_Brandenburg_Gate$geometry, Lines_primary))
library(lubridate)
library(dplyr)
library(geosphere)#package for calculating distance using longitude and latitude
#Clean up memory
rm(list=ls())
#Source storage location (outside the GitHub Repository)
#Because of file size limitation
#files about 100 MB have to be excluded
#D:\STUDIUM\MÃ¼nster\7. Semester\Masterarbeit Daten\Bochum
setwd("D:/STUDIUM/MÃ¼nster/7. Semester/Masterarbeit Daten/Darmstadt")
#Clean up memory
rm(list=ls())
#In order to create a SVR model with R you will need the package e1071
if(!require("e1071")) install.packages("e1071")
library(e1071)
library(tidyverse)
library(sandwich)
library(caret)
#Clean up memory
rm(list=ls())
#Load Data
setwd("D:/ComicandSonsProductions/GameJam1/SpeakerRecognition/TestData")
VoiceData = read.csv(file = "Test.csv",sep=",")
VoiceData[1]=NULL
names(VoiceData)[1]="Voice"
class(VoiceData$Voice)
VoiceData$Voice = as.factor(VoiceData$Voice)
nrow(VoiceData)
n_machines = 10
model <- list()
for(i in 1:n_machines){
print(paste0("Computing model",i))
training.samples <- VoiceData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- VoiceData[training.samples, ]
model[[i]] <- svm(Voice ~., data =  train.data, type = "nu-classification", kernel = "radial", epsilon = 0.1, nu = 0.0075, tolerance = 0.001, shrinking = TRUE)
}
response <- list()
predictions = as.factor(1:nrow(VoiceData))
i=1
j=1
for(i in 1:n_machines){
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = VoiceData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(train.data$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
else{
EvaluationData<-data.frame(EvaluationData,response[[i]])
}
}
i=1
j=1
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = VoiceData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(train.data$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
EvaluationData<-data.frame(train.data$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
VoiceData$Voice
EvaluationData<-data.frame(VoiceData$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
i=1
j=1
for(i in 1:n_machines){
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = VoiceData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(VoiceData$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
else{
EvaluationData<-data.frame(EvaluationData,response[[i]])
}
}
EvaluationData
levels(as.factor(VoiceData$Voice))
EvaluationData[1,]
EvaluationData[1,2:n_machines+1]
which.max(table(EvaluationData[1,2:n_machines+1]))
which.max(EvaluationData[1,2:n_machines+1])
names(which.max(EvaluationData[1,2:n_machines+1]))
levels(EvaluationData[1,2:n_machines+1])
levels(EvaluationData[1,2:n_machines+1])
levels(as.factor(EvaluationData[1,2:n_machines+1]))
EvaluationData[1,2:n_machines+1]
levels(as.factor(EvaluationData[1,2:n_machines+1]))
levels(as.factor(EvaluationData[1,2:n_machines+1]))
as.factor(EvaluationData[1,2:n_machines+1])
levels(as.dataframe(EvaluationData[1,2:n_machines+1]))
levels(as.data.frame(EvaluationData[1,2:n_machines+1]))
as.data.frame(EvaluationData[1,2:n_machines+1])
levels(as.factor(as.data.frame(EvaluationData[1,2:n_machines+1])))
as.factor(as.data.frame(EvaluationData[1,2:n_machines+1]))
EvaluationData[1,2:n_machines+1]
level(EvaluationData[1,2:n_machines+1])
levels(EvaluationData[1,2:n_machines+1])
EvaluationData[1,2:n_machines+1]
summary(EvaluationData[1,2:n_machines+1])
EvaluationData[100,2:n_machines+1]
levels(VoiceData$Voice)
levels(as.factor(VoiceData$Voice))
matrix(1:9, nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice)))
matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice)))
matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice))))
nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)
nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice))
nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)))
nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice))
matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice)))
names(EvaluationData[100,2:n_machines+1])
names(matrix) = names(EvaluationData[100,2:n_machines+1])
matrix
matrix = as.data.frame(matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice))))
names(matrix) = names(EvaluationData[100,2:n_machines+1])
matrix
matrix = 0
matrix
matrix[i,]
matrix[1,]
matrix[,1]
matrix[1]
EvaluationData[100,2:n_machines+1]
levels(as.factor(VoiceData$Voice))
matrix = as.data.frame(matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice))))
names(matrix) = names(EvaluationData[100,2:n_machines+1])
for(i in 1:nrow(VoiceData)){
matrix[1]
}
matrix[1,]
names(EvaluationData[100,2:n_machines+1])
names(EvaluationData[100,1:n_machines+1])
EvaluationData[100,2:n_machines+1]
levels(as.factor(VoiceData$Voice))
matrix = as.data.frame(matrix(1:nrow(VoiceData)*nlevels(as.factor(VoiceData$Voice)), nrow = nrow(VoiceData), ncol = nlevels(as.factor(VoiceData$Voice))))
names(matrix) = names(EvaluationData[100,1:n_machines+1])
matrix[1,]
matrix[1,]=0
matrix[1,]
EvaluationData[100,1:n_machines+1]
names(matrix[j])
EvaluationData[i,k+1]
i = 1
j = 1
k = 1
EvaluationData[i,k+1]
EvaluationData[k+1,i]
EvaluationData[1,]
EvaluationData[,1]
EvaluationData[1,1]
EvaluationData[1,2]
EvaluationData[2,2]
EvaluationData[20,2]
EvaluationData[200,2]
EvaluationData
EvaluationData[3,2]
print(i/nrow(VoiceData)*100)
for(i in 1:nrow(VoiceData)){
print(i/nrow(VoiceData)*100)
matrix[i,]=0
n = 0
for(j in 1:n_machines){
for(k in 1:n_machines){
if(as.factor(names(matrix[j])) == as.factor(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
matrix
for(i in 1:nrow(VoiceData)){
print(i/nrow(VoiceData)*100)
#matrix[i,]=0
n = 0
for(j in 1:n_machines){
for(k in 1:n_machines){
if(as.factor(names(matrix[j])) == as.factor(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
matrix
names(matrix[j]))
as.factor(names(matrix[j]))
as.factor(EvaluationData[i,k+1])
EvaluationData[i,k+1][1]
as.character(EvaluationData[i,k+1])
for(i in 1:nrow(VoiceData)){
print(i/nrow(VoiceData)*100)
#matrix[i,]=0
n = 0
for(j in 1:n_machines){
for(k in 1:n_machines){
if(as.character(names(matrix[j])) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
matrix
as.character(names(matrix[j]))
as.character(EvaluationData[i,k+1])
levels(as.factor(VoiceData$Voice))[j]
names(matrix) = names(EvaluationData[100,1:n_machines+1])
i = 1
j = 1
k = 1
EvaluationData[3,2]
for(i in 1:nrow(VoiceData)){
print(i/nrow(VoiceData)*100)
#matrix[i,]=0
n = 0
for(j in 1:nlevels(as.factor(VoiceData$Voice))){
for(k in 1:n_machines){
if(as.character(levels(as.factor(VoiceData$Voice))[j]) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
matrix
levels(as.factor(VoiceData$Voice))
names(matrix) = levels(as.factor(VoiceData$Voice))
matrix
for(i in 1:nrow(VoiceData)){
print(i/nrow(VoiceData)*100)
#matrix[i,]=0
for(j in 1:nlevels(as.factor(VoiceData$Voice))){
n = 0
for(k in 1:n_machines){
if(as.character(levels(as.factor(VoiceData$Voice))[j]) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
matrix
which.max(matrix)
max.which(matrix)
which.max(matrix[,1])
which.max(matrix[1,])
names(which.max(matrix[1,]))
cummulated_predictions[i] = as.factor(names(which.max(matrix[i,])))
cummulated_predictions = as.factor(1:nrow(VoiceData))
for(i in 1:nrow(VoiceData)){
cummulated_predictions[i] = as.factor(names(which.max(matrix[i,])))
}
cummulated_predictions
as.factor(names(which.max(matrix[i,])))
cummulated_predictions = as.character(1:nrow(VoiceData))
for(i in 1:nrow(VoiceData)){
cummulated_predictions[i] = as.character(names(which.max(matrix[i,])))
}
cummulated_predictions
EvaluationData2<-data.frame(VoiceData$Voice,cummulated_predictions)
names(EvaluationData2)[1] = "Observations"
EvaluationData2
EvaluationData2<-data.frame(VoiceData$Voice,cummulated_predictions)
names(EvaluationData2)[1] = "Observations"
EvaluationData2$Accuracy = EvaluationData2$cummulated_predictions == EvaluationData2$Observation
sum(EvaluationData2$cummulated_predictions == EvaluationData2$Observation)/nrow(EvaluationData2)*100
#Voice/Person Recognition: Bootstrapped Support Vector Machines
#Author: Max Weinhold
#In order to create a SVR model with R you will need the package e1071
if(!require("e1071")) install.packages("e1071")
library(e1071)
library(tidyverse)
library(sandwich)
library(caret)
#Clean up memory
rm(list=ls())
#Load Data
setwd("D:/ComicandSonsProductions/GameJam1/SpeakerRecognition/TestData")
VoiceData = read.csv(file = "Test.csv",sep=",")
VoiceData[1]=NULL
names(VoiceData)[1]="Voice"
class(VoiceData$Voice)
VoiceData$Voice = as.factor(VoiceData$Voice)
nrow(VoiceData)
n_machines = 10
model <- list()
training.samples <- VoiceData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
TrainData <- VoiceData[training.samples,]
TestData <- VoiceData[training.samples,]
for(i in 1:n_machines){
print(paste0("Computing model",i))
training.samples <- TrainData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- TrainData[training.samples, ]
model[[i]] <- svm(Voice ~., data =  train.data, type = "nu-classification", kernel = "radial", epsilon = 0.1, nu = 0.0075, tolerance = 0.001, shrinking = TRUE)
}
response <- list()
predictions = as.factor(1:nrow(TestData))
i=1
j=1
for(i in 1:n_machines){
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = TestData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(TestData$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
else{
EvaluationData<-data.frame(EvaluationData,response[[i]])
}
}
EvaluationData[100,2:n_machines+1]
levels(as.factor(TestData$Voice))
matrix = as.data.frame(matrix(1:nrow(TestData)*nlevels(as.factor(TestData$Voice)), nrow = nrow(TestData), ncol = nlevels(as.factor(TestData$Voice))))
names(matrix) = levels(as.factor(TestData$Voice))
i = 1
j = 1
k = 1
EvaluationData[3,2]
for(i in 1:nrow(TestData)){
print(i/nrow(TestData)*100)
#matrix[i,]=0
for(j in 1:nlevels(as.factor(TestData$Voice))){
n = 0
for(k in 1:n_machines){
if(as.character(levels(as.factor(TestData$Voice))[j]) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
cummulated_predictions = as.character(1:nrow(TestData))
for(i in 1:nrow(TestData)){
cummulated_predictions[i] = as.character(names(which.max(matrix[i,])))
}
EvaluationData2<-data.frame(TestData$Voice,cummulated_predictions)
names(EvaluationData2)[1] = "Observations"
EvaluationData2$Accuracy = EvaluationData2$cummulated_predictions == EvaluationData2$Observation
sum(EvaluationData2$cummulated_predictions == EvaluationData2$Observation)/nrow(EvaluationData2)*100
cummulated_predictions
matrix
#Voice/Person Recognition: Bootstrapped Support Vector Machines
#Author: Max Weinhold
#In order to create a SVR model with R you will need the package e1071
if(!require("e1071")) install.packages("e1071")
library(e1071)
library(tidyverse)
library(sandwich)
library(caret)
#Clean up memory
rm(list=ls())
#Load Data
setwd("D:/ComicandSonsProductions/GameJam1/SpeakerRecognition/TestData")
VoiceData = read.csv(file = "Test.csv",sep=",")
VoiceData[1]=NULL
names(VoiceData)[1]="Voice"
class(VoiceData$Voice)
VoiceData$Voice = as.factor(VoiceData$Voice)
nrow(VoiceData)
n_machines = 10
model <- list()
training.samples <- VoiceData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
TrainData <- VoiceData[training.samples,]
TestData <- VoiceData[-training.samples,]
for(i in 1:n_machines){
print(paste0("Computing model",i))
training.samples <- TrainData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- TrainData[training.samples, ]
model[[i]] <- svm(Voice ~., data =  train.data, type = "nu-classification", kernel = "radial", epsilon = 0.1, nu = 0.0075, tolerance = 0.001, shrinking = TRUE)
}
response <- list()
predictions = as.factor(1:nrow(TestData))
i=1
j=1
for(i in 1:n_machines){
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = TestData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(TestData$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
else{
EvaluationData<-data.frame(EvaluationData,response[[i]])
}
}
EvaluationData[100,2:n_machines+1]
levels(as.factor(TestData$Voice))
matrix = as.data.frame(matrix(1:nrow(TestData)*nlevels(as.factor(TestData$Voice)), nrow = nrow(TestData), ncol = nlevels(as.factor(TestData$Voice))))
names(matrix) = levels(as.factor(TestData$Voice))
i = 1
j = 1
k = 1
EvaluationData[3,2]
for(i in 1:nrow(TestData)){
print(i/nrow(TestData)*100)
#matrix[i,]=0
for(j in 1:nlevels(as.factor(TestData$Voice))){
n = 0
for(k in 1:n_machines){
if(as.character(levels(as.factor(TestData$Voice))[j]) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
cummulated_predictions = as.character(1:nrow(TestData))
for(i in 1:nrow(TestData)){
cummulated_predictions[i] = as.character(names(which.max(matrix[i,])))
}
EvaluationData2<-data.frame(TestData$Voice,cummulated_predictions)
names(EvaluationData2)[1] = "Observations"
EvaluationData2$Accuracy = EvaluationData2$cummulated_predictions == EvaluationData2$Observation
sum(EvaluationData2$cummulated_predictions == EvaluationData2$Observation)/nrow(EvaluationData2)*100
#Voice/Person Recognition: Bootstrapped Support Vector Machines
#Author: Max Weinhold
#In order to create a SVR model with R you will need the package e1071
if(!require("e1071")) install.packages("e1071")
library(e1071)
library(tidyverse)
library(sandwich)
library(caret)
#Clean up memory
rm(list=ls())
#Load Data
setwd("D:/ComicandSonsProductions/GameJam1/SpeakerRecognition/TestData")
VoiceData = read.csv(file = "Test.csv",sep=",")
VoiceData[1]=NULL
names(VoiceData)[1]="Voice"
class(VoiceData$Voice)
VoiceData$Voice = as.factor(VoiceData$Voice)
nrow(VoiceData)
n_machines = 100
model <- list()
training.samples <- VoiceData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
TrainData <- VoiceData[training.samples,]
TestData <- VoiceData[-training.samples,]
for(i in 1:n_machines){
print(paste0("Computing model",i))
training.samples <- TrainData$Voice %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- TrainData[training.samples, ]
model[[i]] <- svm(Voice ~., data =  train.data, type = "nu-classification", kernel = "radial", epsilon = 0.1, nu = 0.0075, tolerance = 0.001, shrinking = TRUE)
}
response <- list()
predictions = as.factor(1:nrow(TestData))
i=1
j=1
for(i in 1:n_machines){
print(paste("Making predictions for the model",i))
response[[i]] <- as.data.frame(predict(model[[i]], newdata = TestData, type='response'))
names(response[[i]])[1] = paste("model",i,sep="_")
if(i==1){
EvaluationData<-data.frame(TestData$Voice,response[[i]])
names(EvaluationData)[1] = "Observations"
}
else{
EvaluationData<-data.frame(EvaluationData,response[[i]])
}
}
EvaluationData[100,2:n_machines+1]
levels(as.factor(TestData$Voice))
matrix = as.data.frame(matrix(1:nrow(TestData)*nlevels(as.factor(TestData$Voice)), nrow = nrow(TestData), ncol = nlevels(as.factor(TestData$Voice))))
names(matrix) = levels(as.factor(TestData$Voice))
i = 1
j = 1
k = 1
EvaluationData[3,2]
for(i in 1:nrow(TestData)){
print(i/nrow(TestData)*100)
#matrix[i,]=0
for(j in 1:nlevels(as.factor(TestData$Voice))){
n = 0
for(k in 1:n_machines){
if(as.character(levels(as.factor(TestData$Voice))[j]) == as.character(EvaluationData[i,k+1])){n = n+1;}
}
matrix[i,j] = n
}
}
cummulated_predictions = as.character(1:nrow(TestData))
for(i in 1:nrow(TestData)){
cummulated_predictions[i] = as.character(names(which.max(matrix[i,])))
}
EvaluationData2<-data.frame(TestData$Voice,cummulated_predictions)
names(EvaluationData2)[1] = "Observations"
EvaluationData2$Accuracy = EvaluationData2$cummulated_predictions == EvaluationData2$Observation
sum(EvaluationData2$cummulated_predictions == EvaluationData2$Observation)/nrow(EvaluationData2)*100
